datasource db {
  //provider  = "postgres"
  provider = "mongodb"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String     @id @default(uuid()) @map("_id")
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  phone        String?
  address      String?
  gender       String?
  bankName     String?
  bankAccNum   String?
  bankAccName  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  properties   Property[]
  //Favorite     Favorite[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]
  bookingCommissionTransactions BookingCommissionTransaction[]
  membershipCommissionTransactions MembershipCommissionTransaction[]
  pointTransactions PointTransaction[]
}

model Property {
  id          String     @id @default(uuid()) @map("_id")
  name        String
  tagline     String
  category    String
  image       String
  city        String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  //Favorite    Favorite[]
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]
}

model Favorite {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model Review {
  id         String   @id @default(uuid()) @map("_id")
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String 
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid()) @map("_id")
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId     String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bookingCommissionTransactions BookingCommissionTransaction[]
}

model Gallery {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  media     String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  subtitle    String
  //category    String
  description String
  profileId   String
  media       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tier {
  id           String     @id @default(uuid()) @map("_id")
  tierName     String
  commission   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  members      Member[]
}

model Member {
  id           String     @id @default(uuid()) @map("_id")
  memberId     String
  parentId     String?
  point        Int     @default(0)
  commission   Float     @default(0)
  tier         Tier     @relation(fields: [tierId], references: [id], onDelete: Cascade)
  tierId       String
  isActive     Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BookingCommissionTransaction {
  id           String     @id @default(uuid()) @map("_id")
  profile      Profile     @relation(fields: [profileId], references: [clerkId])
  profileId    String
  booking      Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId    String
  commission   Float     @default(0)
  referalCode  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MembershipCommissionTransaction {
  id           String     @id @default(uuid()) @map("_id")
  profile      Profile     @relation(fields: [profileId], references: [clerkId])
  profileId    String
  commission   Float     @default(0)
  closerId     String
  closerCommission Float  @default(0)
  referalCode  String?
  paymentStatus Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Reward {
  id           String    @id @default(uuid()) @map("_id")
  rewardName   String
  pointReq     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  pointTransactions PointTransaction[]
}

model PointTransaction {
  id           String     @id @default(uuid()) @map("_id")
  profile      Profile     @relation(fields: [profileId], references: [clerkId])
  profileId    String
  reward       Reward     @relation(fields: [rewardId], references: [id])
  rewardId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}