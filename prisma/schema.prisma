datasource db {
  //provider  = "postgres"
  provider = "mongodb"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String     @id @default(uuid()) @map("_id")
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  properties   Property[]
  //Favorite     Favorite[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]
  members      Member[]
}

model Property {
  id          String     @id @default(uuid()) @map("_id")
  name        String
  tagline     String
  category    String
  image       String
  city        String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  //Favorite    Favorite[]
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]
}

model Favorite {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model Review {
  id         String   @id @default(uuid()) @map("_id")
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String 
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid()) @map("_id")
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId     String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  referred      Member?   @relation("BookingReferrals", fields: [referalCode], references: [memberId], onDelete: NoAction)
  referalCode   String?
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  commissionDistribution CommissionDistribution[]
}

model Gallery {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  media     String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  subtitle    String
  category    String
  description String
  profileId   String
  media       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tier {
  id              String    @id @default(uuid()) @map("_id")
  tierName        String    @unique
  tierLevel       Int       @unique
  commission      Int
  requiredDownline Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  members         Member[]
}

model Member {
  id           String    @id @default(uuid()) @map("_id")
  profile      Profile   @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId    String    @unique
  memberId     String    @unique
  parentMemberId String?
  parentId     String?
  dob          String?
  citizen      String?
  phone        String?
  address      String?
  gender       String?
  bankName     String?
  bankAccNum   String?
  bankAccName  String?
  isMarketing  Boolean   @default(false)
  point        Int       @default(0)
  commission   Float     @default(0)
  tier         Tier      @relation(fields: [tierId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  tierId       String
  isActive     Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  parent       Member?   @relation("Downline", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  downlines    Member[]  @relation("Downline")
  closedTransactions     MembershipCommissionTransaction[] @relation("CloserTransactions")
  membershipReferrals    MembershipCommissionTransaction[] @relation("MembershipReferrals")
  membershipCommissionTransactions MembershipCommissionTransaction[]
  bookingReferrals       Booking[]    @relation("BookingReferrals")
  pointTransactions PointTransaction[]
  pointDistributionHistory PointDistributionHistory[]
  withdrawCommissionRequests WithdrawCommissionRequest[]
  commissionDistribution CommissionDistribution[]

  @@index([tierId])
  @@index([parentId])
}

model MembershipCommissionTransaction {
  id              String    @id @default(uuid()) @map("_id")
  member          Member?   @relation(fields: [memberId], references: [memberId], onDelete: NoAction)
  memberId        String?
  closer          Member?   @relation("CloserTransactions", fields: [closerId], references: [memberId], onDelete: NoAction)
  closerId        String?
  referred        Member?   @relation("MembershipReferrals", fields: [referalCode], references: [memberId], onDelete: NoAction)
  referalCode     String?
  totalPrice      Float
  paymentMethod   String
  proofOfPayment  String?
  paymentStatus   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  pointDistributionHistory PointDistributionHistory[]
  commissionDistribution CommissionDistribution[]

  @@index([memberId])
  @@index([closerId])
  @@index([referalCode])
}

model CommissionDistribution {
  id              String    @id @default(uuid()) @map("_id")
  member          Member?   @relation(fields: [memberId], references: [memberId], onDelete: NoAction)
  memberId        String?
  membershipCommissionTransaction MembershipCommissionTransaction? @relation(fields: [membershipCommissionTransactionId], references: [id], onDelete: NoAction)
  membershipCommissionTransactionId String?
  booking           Booking?   @relation(fields: [bookingId], references: [id], onDelete: NoAction)
  bookingId         String?
  commission      Float     @default(0)
  type            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Reward {
  id              String    @id @default(uuid()) @map("_id")
  rewardName      String    @unique
  pointReq        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  pointTransactions PointTransaction[]
}

model PointTransaction {
  id           String    @id @default(uuid()) @map("_id")
  member       Member?    @relation(fields: [memberId], references: [memberId], onDelete: NoAction)
  memberId     String
  reward       Reward    @relation(fields: [rewardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rewardId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([memberId])
  @@index([rewardId])
}

model PointDistributionHistory {
  id                                 String    @id @default(uuid()) @map("_id")
  member                           Member?   @relation(fields: [memberId], references: [memberId], onDelete: NoAction)
  memberId                         String
  point                            Int
  type                             String
  membershipCommissionTransaction   MembershipCommissionTransaction? @relation(fields: [membershipCommissionTransactionId], references: [id], onDelete: NoAction)
  membershipCommissionTransactionId String?
  createdAt                        DateTime  @default(now())
  updatedAt                        DateTime  @updatedAt

  @@index([memberId])
  @@index([membershipCommissionTransactionId])
}

model GeneralVariable {
  id            String    @id @default(uuid()) @map("_id")
  variableName  String    @unique
  variableValue String
  variableType  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WithdrawCommissionRequest {
  id             String    @id @default(uuid()) @map("_id")
  member         Member?    @relation(fields: [memberId], references: [memberId], onDelete: NoAction)
  memberId       String
  bankName       String
  bankAccNumber  String
  bankAccName    String
  amount         Float     
  status         String
  notes          String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([memberId])
}
